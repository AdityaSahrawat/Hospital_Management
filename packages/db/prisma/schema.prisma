generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Staff {
  id             Int         @id @default(autoincrement())
  name           String
  specialization String
  departmentId   Int?
  isAvailable    Boolean     @default(true)
  department     Department? @relation(fields: [departmentId], references: [id])
}


model Department {
  id    Int     @id @default(autoincrement())
  name  String
  beds  Bed[]
  staff Staff[]
}


enum BedStatus {
  FREE
  OCCUPIED
  MAINTENANCE
}


model Bed {
  id           Int        @id @default(autoincrement())
  type         String
  status       BedStatus
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
}


model Disease {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  subcategories Subcategory[]
}


model Subcategory {
  id        Int        @id @default(autoincrement())
  name      String
  diseaseId Int
  ageGroups AgeGroup[]
  disease   Disease    @relation(fields: [diseaseId], references: [id])
}


enum AgeGroupEnum {
  CHILD
  TEENAGER
  ADULT
  OLDER
}


model AgeGroup {
  id           Int                  @id @default(autoincrement())
  group        AgeGroupEnum
  ageRange     String               
  subcategory  Subcategory          @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int
  prescribed   PrescribedMedicine[]
}


model Medicine {
  id         Int                  @id @default(autoincrement())
  name       String               // e.g., Amlodipine
  form       String               // tablet, syrup, injection
  strength   String               // e.g., 5mg, 10mg, 100mg/ml
  unit       String               // mg, ml, IU
  prescribed PrescribedMedicine[]
  Inventory  Inventory[]
}


model PrescribedMedicine {
  id         Int       @id @default(autoincrement())
  ageGroup   AgeGroup  @relation(fields: [ageGroupId], references: [id])
  ageGroupId Int
  medicine   Medicine  @relation(fields: [medicineId], references: [id])
  medicineId Int
  dosage     String    // e.g., "5â€“10 mg once daily"
  notes      String?
}


model Inventory {
  id          Int      @id @default(autoincrement())
  medicine    Medicine @relation(fields: [medicineId], references: [id])
  medicineId  Int
  availableQty Int      // number of units in stock (tablets, ml, etc.)
  batchNumber String?
  expiryDate  DateTime?
  updatedAt   DateTime @updatedAt
}
